&lt;<span class="function-name">h1</span>&gt;&lt;<span class="function-name">u</span>&gt;<span class="underline">Virtualbox  Local desktop virtualization</span>&lt;/<span class="function-name">u</span>&gt;&lt;/<span class="function-name">h1</span>&gt;_ 

&lt;<span class="function-name">pre</span> <span class="variable-name">style</span>=<span class="string">"font-size:200%"</span>&gt;
stackoverflow.com/questions/38437264/i-cant-execute-command-modprobe-vboxdrv
https://askubuntu.com/questions/820883/how-to-resolve-ssl-error-during-make-modules-install-command
https://superuser.com/questions/1214116/no-openssl-sign-file-signing-key-pem-leads-to-error-while-loading-kernel-modules/1322832#1322832
&lt;/<span class="function-name">pre</span>&gt;

&lt;<span class="function-name">h1</span>&gt;<span class="underline"><span class="bold">KVM Remote desktop virtualization and Server virtualization:</span></span>&lt;/<span class="function-name">h1</span>&gt;_

https://wiki.debian.org/KVM?highlight=%28%5CbCategoryVirtualization%5Cb%29




&lt;<span class="function-name">h1</span>&gt;<span class="underline"><span class="bold">DigitalOcean Virtualization:</span></span>&lt;/<span class="function-name">h1</span>&gt;_

https://tinyurl.com/fbktcw5s
https://www.digitalocean.com/community/tutorials/what-is-a-virtual-machine
https://www.digitalocean.com/community/tutorial-series/getting-started-with-cloud-computing
https://www.digitalocean.com/community/tutorials/a-general-introduction-to-cloud-computing
https://www.digitalocean.com/community/conceptual-articles/cloud-servers-an-introduction
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu





&lt;<span class="function-name">h1</span>&gt;<span class="underline"><span class="bold">Bootloader iso and raw:</span></span>&lt;/<span class="function-name">h1</span>&gt;_

https://tinyurl.com/y4w6uhhh
https://stackoverflow.com/questions/34268518/creating-a-bootable-iso-image-with-custom-bootloader
https://wiki.debian.org/RepackBootableISO
https://stackoverflow.com/questions/20209263/genisoimage-script-cannot-burn-bigger-than-4gb-but-less-than-4-5gb-file
https://tinyurl.com/5fmpbe48
https://superuser.com/questions/357512/why-is-my-linux-reporting-an-allowable-size-error-when-building-an-iso

sudo losetup -f -P disk.raw
sudo dd if=/dev/loop0 of=boot.img bs=512 count=1
sudo mkisofs -allow-limited-size -l -J -r -iso-level 3 -o bootable.iso disk.raw

sudo apt-get install qemu-utils
qemu-img convert -O vmdk  disk.raw disk.vmdk
sudo modprobe nbd
sudo qemu-nbd  -c /dev/nbd0  disk.vmdk
sudo mount /dev/nbd0p1 /media/
mkdir iso_image
sudo cp -r /media/* iso_image/
sudo umount /media
$sudo genisoimage -quiet -no-emul-boot -boot-load-size 4 -boot-info-table -V 'MYOS' -input-charset iso8859-1 -o myos.iso  -b boot/grub/i386-pc/boot.img -c boot.cdr -R -T iso_image/

https://tinyurl.com/mhf2pt3p
https://www.gnu.org/software/grub/manual/grub/html_node/Images.html
https://tinyurl.com/3vprcbst (what is mbr boot sector)
https://tinyurl.com/yc2ydd4r (what is bootable device)

sudo mount /dev/loop0p1 /media/
sudo mount /dev/loop0p15  /media/boot/efi/
chroot /media
mount -t sysfs sys/  sys/
mount -t devtmpfs dev/ dev/
mount -t proc proc/ proc/
update-grub2
mount -t devpts  dev/pts/ dev/pts/
mount -t efivarfs sys/firmware/efi/efivars/ sys/firmware/efi/efivars/
grub-install /dev/loop0
special link :https://medium.com/@ThyCrow/creating-hybrid-image-file-from-compiled-linux-kernel-and-initramfs-with-grub-c7599895b742

sudo genisoimage -quiet -no-emul-boot -boot-load-size 4 -boot-info-table -V 'MYOS' -input-charset iso8859-1 -b boot/efi/EFI/BOOT/grubx64.efi -o mycloud.iso  -R -T  /media/

https://askubuntu.com/questions/314754/how-to-get-the-grub-using-virtualbox

&lt;<span class="function-name">h1</span>&gt;<span class="underline"><span class="bold">Qemu Virtualization:</span></span>&lt;/<span class="function-name">h1</span>&gt;

https://tinyurl.com/3wce29dz
sudo apt-get install qemu-system


&lt;<span class="function-name">h1</span>&gt;<span class="underline"><span class="bold">Bash Commands:</span></span>&lt;/<span class="function-name">h1</span>&gt;

convert from uppercase to lowecase 

echo "THIS IS MY DATA" | tr '[:upper:]' '[:lower:]'


_Emacs and Lisp_

https://github.com/zoliky/dotemacs



(mark-end-of-sentence)
(set-face-background-color region brightcyan)
(Custom-save  yes)

https://emacs.stackexchange.com/questions/2797/emacs-wont-load-theme-on-startup
(load-theme `jeffrin t)
In Emacs Lisp (and Lisp in general), "t" represents the truth value "true",
similar to how "true" is represented in other programming languages.
The opposite of "t" is "nil", which represents "false" or the absence of a value. 

https://superuser.com/questions/356129/is-there-a-way-to-print-the-definition-of-an-existing-function-in-emacs

If you type C-h f function-name RET,
you'll get the function's documentation, with a link to the function source if available.

https://emacs.stackexchange.com/questions/73213/why-cant-i-compose-commands-mark-whole-buffer-and-copy-region-as-kill-in-el
http://xahlee.info/emacs/emacs/emacs_as_word_processor.html
https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Faces

(underline-region)
(set-face-underline)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-selection-coding-system 'utf-8)

(set-buffer-file-coding-system)
(package-list-packages)

(describe-current-coding-system)

https://orgmode.org/quickstart.html
https://elpa.gnu.org/packages/org-modern.html

&lt;<span class="function-name">pre</span>&gt;The command M-x kill-some-buffers asks about each buffer,
  one by one. An answer of yes means to kill the buffer, just
  like kill-buffer . This command ignores buffers whose names
  begin with a space, which are used internally by Emacs.&lt;/<span class="function-name">pre</span>&gt;

(kill-some-buffers)
(windmove-delete-up)


How to play audio and video using emms ?



(emms-all)
(setq emms-player-list '(emms-player-vlc)
      emms-info-functions '(emms-info-native))

M-x emms-add-directory-tree RET ~/my_music_directory/ RET
M-x emms-playlist-mode-go

https://lucidmanager.org/productivity/configure-emms/

M-x emms
M-x emms-start
M-x emms-stop
M-x emms-pause

M-x menu-bar-open


_Wordpress_


https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-22-04-with-a-lamp-stack
https://wiki.debian.org/WordPress


sudo apt-get install mysql-server-8.0
sudo apt-get install mysql-client-8.0


mysql -u root -p
sudo mysql -u root
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'new_password';
mysql -u root -p
CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
CREATE USER 'wordpressuser'@'%' IDENTIFIED WITH mysql_native_password BY 'password';
GRANT ALL ON wordpress.* TO 'wordpressuser'@'%';
FLUSH PRIVILEGES;
EXIT;


sudo apt update
sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip
sudo apt install apache2
sudo systemctl restart apache2
sudo nano /etc/apache2/sites-available/wordpress.conf

<Directory /var/www/wordpress/>
	AllowOverride All
</Directory>

sudo a2enmod rewrite
sudo systemctl restart apache2

http://example.com/2012/post-name/
http://example.com/2012/12/30/post-name

sudo apache2ctl configtest

Output
AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message
Syntax OK

sudo systemctl restart apache2
cd /tmp
curl -O https://wordpress.org/latest.tar.gz
tar xzvf latest.tar.gz
touch /tmp/wordpress/.htaccess
cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php
mkdir /tmp/wordpress/wp-content/upgrade
sudo cp -a /tmp/wordpress/. /var/www/wordpress

sudo chown -R www-data:www-data /var/www/wordpress
sudo find /var/www/wordpress/ -type d -exec chmod 750 {} \;
sudo find /var/www/wordpress/ -type f -exec chmod 640 {} \;
curl -s https://api.wordpress.org/secret-key/1.1/salt/

Output
define('AUTH_KEY',         '1jl/vqfs<XhdXoAPz9 DO NOT COPY THESE VALUES c_j{iwqD^<+c9.k<J@4H');
define('SECURE_AUTH_KEY',  'E2N-h2]Dcvp+aS/p7X DO NOT COPY THESE VALUES {Ka(f;rv?Pxf})CgLi-3');
define('LOGGED_IN_KEY',    'W(50,{W^,OPB%PB<JF DO NOT COPY THESE VALUES 2;y&,2m%3]R6DUth[;88');
define('NONCE_KEY',        'll,4UC)7ua+8<!4VM+ DO NOT COPY THESE VALUES #`DXF+[$atzM7 o^-C7g');
define('AUTH_SALT',        'koMrurzOA+|L_lG}kf DO NOT COPY THESE VALUES  07VC*Lj*lD&?3w!BT#-');
define('SECURE_AUTH_SALT', 'p32*p,]z%LZ+pAu:VY DO NOT COPY THESE VALUES C-?y+K0DK_+F|0h{!_xY');
define('LOGGED_IN_SALT',   'i^/G2W7!-1H2OQ+t$3 DO NOT COPY THESE VALUES t6**bRVFSD[Hi])-qS`|');
define('NONCE_SALT',       'Q6]U:K?j4L%Z]}h^q7 DO NOT COPY THESE VALUES 1% ^qUswWgn+6&xqHN&%');

sudo nano /var/www/wordpress/wp-config.php
. . .

define('AUTH_KEY',         'put your unique phrase here');
define('SECURE_AUTH_KEY',  'put your unique phrase here');
define('LOGGED_IN_KEY',    'put your unique phrase here');
define('NONCE_KEY',        'put your unique phrase here');
define('AUTH_SALT',        'put your unique phrase here');
define('SECURE_AUTH_SALT', 'put your unique phrase here');
define('LOGGED_IN_SALT',   'put your unique phrase here');
define('NONCE_SALT',       'put your unique phrase here');

. . .

. . .

define('AUTH_KEY',         'VALUES COPIED FROM THE COMMAND LINE');
define('SECURE_AUTH_KEY',  'VALUES COPIED FROM THE COMMAND LINE');
define('LOGGED_IN_KEY',    'VALUES COPIED FROM THE COMMAND LINE');
define('NONCE_KEY',        'VALUES COPIED FROM THE COMMAND LINE');
define('AUTH_SALT',        'VALUES COPIED FROM THE COMMAND LINE');
define('SECURE_AUTH_SALT', 'VALUES COPIED FROM THE COMMAND LINE');
define('LOGGED_IN_SALT',   'VALUES COPIED FROM THE COMMAND LINE');
define('NONCE_SALT',       'VALUES COPIED FROM THE COMMAND LINE');

. . .
. . .

define('AUTH_KEY',         'VALUES COPIED FROM THE COMMAND LINE');
define('SECURE_AUTH_KEY',  'VALUES COPIED FROM THE COMMAND LINE');
define('LOGGED_IN_KEY',    'VALUES COPIED FROM THE COMMAND LINE');
define('NONCE_KEY',        'VALUES COPIED FROM THE COMMAND LINE');
define('AUTH_SALT',        'VALUES COPIED FROM THE COMMAND LINE');
define('SECURE_AUTH_SALT', 'VALUES COPIED FROM THE COMMAND LINE');
define('LOGGED_IN_SALT',   'VALUES COPIED FROM THE COMMAND LINE');
define('NONCE_SALT',       'VALUES COPIED FROM THE COMMAND LINE');

. . .

/var/www/wordpress/wp-config.php

. . .

// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( 'DB_NAME', 'wordpress' );

/** MySQL database username */
define( 'DB_USER', 'wordpressuser' );

/** MySQL database password */
define( 'DB_PASSWORD', 'password' );

/** MySQL hostname */
define( 'DB_HOST', 'localhost' );

/** Database Charset to use in creating database tables. */
define( 'DB_CHARSET', 'utf8' );

/** The Database Collate type. Don't change this if in doubt. */
define( 'DB_COLLATE', '' );


. . .

define('FS_METHOD', 'direct');

sudo a2ensite wordpress
systemctl reload apache2

https://server_domain_or_IP
<br>
					       
&lt;<span class="function-name">h1</span>&gt;<span class="underline"><span class="bold">
Here's how to read from /dev/dsp in Linux using Python:</span></span>&lt;/<span class="function-name">h1</span>&gt;
<br>

import os
import ossaudiodev

def read_from_dsp(device_path="/dev/dsp", chunk_size=1024):
    """Reads audio data from the specified /dev/dsp device.

    Args:
        device_path: The path to the /dev/dsp device (default: /dev/dsp).
        chunk_size: The number of bytes to read in each chunk (default: 1024).

    Returns:
        A generator that yields chunks of audio data read from the device.
    """
    try:
        dsp = ossaudiodev.open(device_path, 'rb')
        while True:
            chunk = dsp.read(chunk_size)
            if not chunk:
                break
            yield chunk
    except ossaudiodev.error as e:
        print(f"Error accessing {device_path}: {e}")
    finally:
        if 'dsp' in locals():
            dsp.close()


if __name__ == "__main__":
    for data_chunk in read_from_dsp():
        # Process the audio data chunk here
        # Example: print(f"Received chunk of size: {len(data_chunk)}")
        pass

mkdir fread-and-fwrite
python3 -m venv fread-and-fwrite/
python3 devdsp.py

Traceback (most recent call last):
  File "/home/jeffrin/others/files/fread-and-fwrite/devdsp.py", line 2, in <module>
    import ossaudiodev
ModuleNotFoundError: No module named 'ossaudiodev'
(fread-and-fwrite) $pip install ossaudiodev
ERROR: Could not find a version that satisfies the requirement ossaudiodev (from versions: none)
ERROR: No matching distribution found for ossaudiodev

    https://unix.stackexchange.com/questions/17828/output-sound-by-writing-to-dev-dsp
    https://www.geeksforgeeks.org/play-sound-in-python/
    pip install playground

https://tinyurl.com/5ycwzxp2

    
    Here is how to read from /dev/dsp in Linux using C: Include necessary headers.

    #include <fcntl.h>    // for open()
    #include <unistd.h>   // for read(), close()
    #include <sys/ioctl.h> // for ioctl()
    #include <linux/soundcard.h> // for soundcard definitions
    #include <stdio.h> // for perror and printf
    #include <stdlib.h> // for exit


    

    Open the device.
    
        int fd = open("/dev/dsp", O_RDONLY);
    if (fd == -1) {
        perror("Error opening /dev/dsp");
        exit(1);
    }

	      
Set audio format (optional).
	      

        int format = AFMT_S16_LE; // Example: 16-bit signed little-endian
    if (ioctl(fd, SNDCTL_DSP_SETFMT, &format) == -1) {
        perror("Error setting audio format");
        close(fd);
        exit(1);
    }

     int channels = 1; // Mono
    if (ioctl(fd, SNDCTL_DSP_CHANNELS, &channels) == -1) {
        perror("Error setting number of channels");
        close(fd);
        exit(1);
    }

    int speed = 44100; // Sample rate
     if (ioctl(fd, SNDCTL_DSP_SPEED, &speed) == -1) {
        perror("Error setting sample rate");
        close(fd);
        exit(1);
	      }

	      
	      Read audio data.
	      

    #define BUFFER_SIZE 1024
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read;

    while ((bytes_read = read(fd, buffer, BUFFER_SIZE)) > 0) {
        // Process the audio data in 'buffer'
        // Example: write(STDOUT_FILENO, buffer, bytes_read); // Output to standard output
        printf("Read %zd bytes\n", bytes_read);
    }

    if (bytes_read == -1) {
        perror("Error reading from /dev/dsp");
        close(fd);
        exit(1);
	      }

	      Close the device.

    close(fd);

Example   
    

#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/soundcard.h> 
#include <stdio.h>
#include <stdlib.h>

#define BUFFER_SIZE 1024

int main() {
    int fd;
    int format = AFMT_S16_LE;
    int channels = 1;
    int speed = 44100;
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read;

    fd = open("/dev/dsp", O_RDONLY);
    if (fd == -1) {
        perror("Error opening /dev/dsp");
        return 1;
    }

    if (ioctl(fd, SNDCTL_DSP_SETFMT, &format) == -1) {
        perror("Error setting audio format");
        close(fd);
        return 1;
    }

   if (ioctl(fd, SNDCTL_DSP_CHANNELS, &channels) == -1) {
        perror("Error setting number of channels");
        close(fd);
        return 1;
    }

    if (ioctl(fd, SNDCTL_DSP_SPEED, &speed) == -1) {
        perror("Error setting sample rate");
        close(fd);
        return 1;
    }


    while ((bytes_read = read(fd, buffer, BUFFER_SIZE)) > 0) {
         write(STDOUT_FILENO, buffer, bytes_read);
    }

    if (bytes_read == -1) {
        perror("Error reading from /dev/dsp");
        close(fd);
        return 1;
    }

    close(fd);
    return 0;
}

		      Compile and run:

gcc your_program.c -o your_program
./your_program

https://askubuntu.com/questions/61693/how-do-i-select-and-copy-text-in-emacs-using-the-keyboard
https://pixabay.com/sound-effects/search/16-bit/
https://www.c-language.org/
https://tinyurl.com/5n7v6xxa

cat hoe-lot-better-334925.mp3 | mpg123 -
cat hoe-lot-better-334925.mp3 > /dev/dsp1
gcc -o devdsp -m64 devdsp-c.c
cat hoe-lot-better-334925.mp3 l ./devdsp

 while ((bytes_read = read(fd, buffer, BUFFER_SIZE)) > 0) {
      /*  write(STDOUT_FILENO, buffer, bytes_read); */
         write(fd, buffer, bytes_read);
    }

strace cat mustafa_mustafa-song.mp3 | ./devdsp --

https://tinyurl.com/2h5a8a5x
https://tinyurl.com/4hxeb2zh (Linux Sound FAQ)

cat happy-14585.mp3 | tee  /dev/dsp1
$cat happy-14585.mp3 |  ./devdsp -
bash: ./devdsp: cannot execute binary file: Exec format error

https://tinyurl.com/yc2tu2p6 (/dev/dsp  site: www.kernel.org)
https://stackoverflow.com/questions/12902627/whats-the-difference-between-stdout-and-stdout-fileno
https://tinyurl.com/344y42kn ( int main() )
https://tinyurl.com/582ft5kb (how to convert mp3 to raw  in linux

ffmpeg -i mustafa_mustafa-song.mp3 -acodec pcm_s16le -ar 44100 -ac 2 output.raw
yt-dlp -i --extract-audio --audio-format wav --audio-quality 0 https://www.youtube.com/watch?v=Uzrdx_IjPmg

gcc foo.c `pkg-config --libs alsa`
gcc alsaplay.c  `pkg-config --libs alsa`

https://superuser.com/questions/1869423/why-am-i-getting-a-no-such-file-or-directory-error-while-trying-to-an-ffmpeg-a

sudo apt source libsndfile1



sudo apt-get update
sudo apt-get install libao-dev


#include <ao/ao.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    ao_device *dev;
    ao_sample_format format;
    int driver;
    char *buffer;
    int size;
    FILE *fp;

    ao_initialize();

    driver = ao_default_driver_id();

    format.bits = 16;
    format.channels = 2;
    format.rate = 44100;
    format.byte_format = AO_FMT_LITTLE;

    dev = ao_open_live(driver, &format, NULL);
    if (dev == NULL) {
        printf("Error opening device.\n");
        return 1;
    }

    fp = fopen("sunzara,wav", "rb"); // Replace audio.raw with your raw audio file
     if (fp == NULL) {
        printf("Error opening file.\n");
        return 1;
    }
    
    size = 4096;
    buffer = (char *)malloc(size);
    
    while (fread(buffer, 1, size, fp) > 0) {
        ao_play(dev, buffer, size);
    }

    fclose(fp);
    free(buffer);
    ao_close(dev);
    ao_shutdown();
    return 0;
}

gcc playsound.c  -lao

_How to play video files in GNU/Linux_

https://stackoverflow.com/questions/31058571/reading-camera-input-from-dev-video0-in-python-or-c
https://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html?highlight=videowriter
https://tinyurl.com/kasht3vv (pip  install opencv-python)

pip install --upgrade pip.
sudo apt-get install  python3-opencv (working)

python3 playvideo.py 
QSocketNotifier: Can only be used with threads started with QThread
Traceback (most recent call last):
  File "/home/jeffrin/others/files/fread-and-fwrite/playvideo.py", line 13, in <module>
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
cv2.error: OpenCV(4.10.0) ./modules/imgproc/src/color.cpp:196: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'

https://forum.qt.io/topic/29587/solved-qsocketnotifier-can-only-be-used-with-threads-started-with-qthread
https://stackoverflow.com/questions/13888061/qsocketnotifier-can-only-be-used-with-threads-started-with-qthread-error


https://wiki.gnome.org/Apps/Videos
https://gstreamer.freedesktop.org



_How to write a device driver related stuff on GNU/Linux_

https://stackoverflow.com/questions/22632713/how-to-write-a-simple-linux-device-driver
https://www.apriorit.com/dev-blog/195-simple-driver-for-linux-os
https://github.com/cirosantilli/linux-kernel-module-cheat/blob/68af3477cce1cd22566edce2651f54cf8c184a91/kernel_module/fops.c
https://jvgd.medium.com/how-to-write-a-device-driver-76d0584a4be3

/*
Basic fops example, with a fixed size static data buffer.

Usage:

	/fops.sh

The buffer can be written and read from. If data overflows, data is thrown away.

No, there ain't no official docs:
http://stackoverflow.com/questions/15213932/what-are-the-struct-file-operations-arguments

fops define what the kernel will do on filesystem system calls on all of
/dev, /proc, /sys, and consistute the main method of userland communication
in drivers (syscalls being the other one).

Here we use debugfs.
*/

#include <asm/uaccess.h> /* copy_from_user, copy_to_user */
#include <linux/debugfs.h>
#include <linux/errno.h> /* EFAULT */
#include <linux/fs.h> /* file_operations */
#include <linux/kernel.h> /* min */
#include <linux/module.h>
#include <linux/printk.h> /* printk */
#include <uapi/linux/stat.h> /* S_IRUSR */

static struct dentry *debugfs_file;
static char data[] = {'a', 'b', 'c', 'd'};

static int open(struct inode *inode, struct file *filp)
{
	pr_info("open\n");
	return 0;
}

/* @param[in,out] off: gives the initial position into the buffer.
 *      We must increment this by the ammount of bytes read.
 *      Then when userland reads the same file descriptor again,
 *      we start from that point instead.
 * */
static ssize_t read(struct file *filp, char __user *buf, size_t len, loff_t *off)
{
	ssize_t ret;

	pr_info("read\n");
	pr_info("len = %zu\n", len);
	pr_info("off = %lld\n", (long long)*off);
	if (sizeof(data) <= *off) {
		ret = 0;
	} else {
		ret = min(len, sizeof(data) - (size_t)*off);
		if (copy_to_user(buf, data + *off, ret)) {
			ret = -EFAULT;
		} else {
			*off += ret;
		}
	}
	pr_info("buf = %.*s\n", (int)len, buf);
	pr_info("ret = %lld\n", (long long)ret);
	return ret;
}

/* Similar to read, but with one notable difference:
 * we must return ENOSPC if the user tries to write more
 * than the size of our buffer. Otherwise, Bash > just
 * keeps trying to write to it infinitely. */
static ssize_t write(struct file *filp, const char __user *buf, size_t len, loff_t *off)
{
	ssize_t ret;

	pr_info("write\n");
	pr_info("len = %zu\n", len);
	pr_info("off = %lld\n", (long long)*off);
	if (sizeof(data) <= *off) {
		ret = 0;
	} else {
		if (sizeof(data) - (size_t)*off < len) {
			ret = -ENOSPC;
		} else {
			if (copy_from_user(data + *off, buf, len)) {
				ret = -EFAULT;
			} else {
				ret = len;
				pr_info("buf = %.*s\n", (int)len, data + *off);
				*off += ret;
			}
		}
	}
	pr_info("ret = %lld\n", (long long)ret);
	return ret;
}

/*
Called on the last close:
http://stackoverflow.com/questions/11393674/why-is-the-close-function-is-called-release-in-struct-file-operations-in-the-l
*/
static int release(struct inode *inode, struct file *filp)
{
	pr_info("release\n");
	return 0;
}

static loff_t llseek(struct file *filp, loff_t off, int whence)
{
	loff_t newpos;

	pr_info("llseek\n");
	pr_info("off = %lld\n", (long long)off);
	pr_info("whence = %lld\n", (long long)whence);
	switch(whence) {
		case SEEK_SET:
			newpos = off;
			break;
		case SEEK_CUR:
			newpos = filp->f_pos + off;
			break;
		case SEEK_END:
			newpos = sizeof(data) + off;
			break;
		default:
			return -EINVAL;
	}
	if (newpos < 0) return -EINVAL;
	filp->f_pos = newpos;
	pr_info("newpos = %lld\n", (long long)newpos);
	return newpos;
}

static const struct file_operations fops = {
	/* Prevents rmmod while fops are running.
	 * Try removing this for poll, which waits a lot. */
	.owner = THIS_MODULE,
	.llseek = llseek,
	.open = open,
	.read = read,
	.release = release,
	.write = write,
};

static int myinit(void)
{
	debugfs_file = debugfs_create_file("lkmc_fops", S_IRUSR | S_IWUSR, NULL, NULL, &fops);
	return 0;
}

static void myexit(void)
{
	debugfs_remove_recursive(debugfs_file);
}

module_init(myinit)
module_exit(myexit)
MODULE_LICENSE("GPL");


#!/bin/sh

set -x
insmod /fops.ko
cd /sys/kernel/debug/lkmc_fops

## Basic read.
cat f
# => abcd
# dmesg => open
# dmesg => read
# dmesg => len = [0-9]+
# dmesg => close

## Basic write

printf '01' >f
# dmesg => open
# dmesg => write
# dmesg => len = 1
# dmesg => buf = a
# dmesg => close

cat f
# => 01cd
# dmesg => open
# dmesg => read
# dmesg => len = [0-9]+
# dmesg => close

## ENOSPC
printf '1234' >f
printf '12345' >f
echo "$?"
# => 8
cat f
# => 1234

## seek
printf '1234' >f
printf 'z' | dd bs=1 of=f seek=2
cat f
# => 12z4


               open
[ 1356.997745] write
[ 1356.997747] len = 8
[ 1356.997750] off = 0
[ 1356.997752] ret = -28
[ 1356.997846] release
[ 1537.965916] open
[ 1537.965946] read
[ 1537.965950] len = 262144
[ 1537.965955] off = 0
[ 1537.965965] ret = 4
[ 1537.965985] read
[ 1537.965988] len = 262144
[ 1537.965992] off = 4
[ 1537.965995] ret = 0
[ 1537.966026] release
[ 1543.817742] open
[ 1543.817775] read
[ 1543.817779] len = 262144
[ 1543.817784] off = 0
[ 1543.817794] ret = 4
[ 1543.817810] read
[ 1543.817814] len = 262144
[ 1543.817819] off = 4
[ 1543.817823] ret = 0
[ 1543.817855] release
[ 1545.487963] open
[ 1545.487994] read
[ 1545.487997] len = 262144
[ 1545.488003] off = 0
[ 1545.488012] ret = 4
[ 1545.488044] read
[ 1545.488048] len = 262144
[ 1545.488053] off = 4
[ 1545.488057] ret = 0
[ 1545.488091] release
[ 1562.504299] open
[ 1562.504344] read
[ 1562.504349] len = 262144
[ 1562.504355] off = 0
[ 1562.504367] ret = 4
[ 1562.504387] read
[ 1562.504391] len = 262144
[ 1562.504396] off = 4
[ 1562.504401] ret = 0
[ 1562.504435] release
[ 1564.394598] open
[ 1564.394616] read
[ 1564.394618] len = 262144
[ 1564.394621] off = 0
[ 1564.394626] ret = 4
[ 1564.394639] read
[ 1564.394640] len = 262144
[ 1564.394642] off = 4
[ 1564.394644] ret = 0
[ 1564.394659] release
[ 1566.505413] open
[ 1566.505453] read
[ 1566.505457] len = 262144
[ 1566.505463] off = 0
[ 1566.505475] ret = 4
[ 1566.505496] read
[ 1566.505500] len = 262144
[ 1566.505505] off = 4
[ 1566.505509] ret = 0
[ 1566.505545] release
[ 1669.090267] open
[ 1669.090303] write
[ 1669.090306] len = 2
[ 1669.090311] off = 0
[ 1669.090315] buf = z

[ 1669.090320] ret = 2
[ 1669.090327] release
[ 1689.022637] open
[ 1689.022658] read
[ 1689.022660] len = 262144
[ 1689.022664] off = 0
[ 1689.022670] ret = 4
[ 1689.022684] read
[ 1689.022686] len = 262144
[ 1689.022688] off = 4
[ 1689.022690] ret = 0
[ 1689.022709] release







https://stackoverflow.com/questions/49459211/how-to-build-a-single-source-file-of-a-kernel-module
https://docs.kernel.org/kbuild/modules.html


chat --
<jeffrin> this is the c program https://pastebin.com/FnQFbFgq
<jeffrin> this is a typical shell program https://pastebin.com/im3FDq3T
<jeffrin> shall i disable secureboot from the bios is possible
<aaabbb> or try booting with module.sig_enforce=0

https://stackoverflow.com/questions/58546126/insmod-error-could-not-insert-module-helloworld-ko-operation-not-permitted
https://askubuntu.com/questions/762254/why-do-i-get-required-key-not-available-when-install-3rd-party-kernel-modules

./fops.sh: 5: cd: can't cd to /sys/kernel/debug/lkmc_fops
You need execute permission to cd into a directory.
https://serverfault.com/questions/243191/why-cant-i-cd-into-a-directory


chat --

 First I need to compile your module. What kernel version are you on?
<post-factum> > pr_info("buf = %.*s\n", (int)len, buf);
<post-factum> this is wrong
<jeffrin> i use debian 6.12.25
<post-factum> you cannot read from a userspace buffer directly
<post-factum> it will oops with protection failure and kill cat

jeffrin, hello!
<jeffrin> hello
* tds has quit (Quit: Ping timeout (120 seconds))
* tds (~tds@lounge.timstallard.me.uk) has joined
<jeffrin> hello  /sys/kernel/debug/lkmc_fops exits
<jeffrin> <jeffrin> but  cat gives...
<jeffrin> <jeffrin> root@localhost:/sys/kernel/debug# cat lkmc_fops 
<jeffrin> <jeffrin> Killed
<jeffrin> did you get it
<jeffrin> this is the c program https://pastebin.com/FnQFbFgq
<jeffrin> iam learning to write  related driver  related to linux kernel
<jeffrin> can you tell me what this program is trying to do  
* nodelay has quit (Ping timeout: 260 seconds)
<wobbol> First I need to compile your module. What kernel version are you on?
<post-factum> > pr_info("buf = %.*s\n", (int)len, buf);
<post-factum> this is wrong
<jeffrin> i use debian 6.12.25
<post-factum> you cannot read from a userspace buffer directly
<post-factum> it will oops with protection failure and kill cat
<jeffrin> so how to change the code to fix it
<post-factum> it's up to you, of course, you copy-pasted this code from stackoverflow for some reason :)
<post-factum> you can comment out that line, or you can use copy_from_user()
<post-factum> not sure, maybe %pus will work
<jeffrin> can you tell me what that program is trying to do
* Milkman (~Milkman42@user/Milkman420) has joined
<post-factum> no, %pus is for ebpf only
<post-factum> just read the code, try to understand it yourself and ask questions. it's not a program, it's a kernel module
<post-factum> hint: it registers a debugfs file, provides hooks for reading from it and writing
<jeffrin> cat lkmc_fops
<jeffrin> now come back to prompt
<jeffrin> i commented the line as you said
What does cat do to the lkmc_fops file?
<jeffrin> iam not sure
* jarthur (~jarthur@user/jarthur) has joined
<jeffrin> is debugfs a kernel internal data structure
* Milkman has quit (Quit: leaving)
* Milkman (~Milkman42@p20030006338f02a630242a83fa2af93a.dip0.t-ipconnect.de) has joined
<wobbol> Cat is a program that doesn't know anything about debugfs. But, it can operate on /sys/kernel/debug/lkmc_fops. What operation is cat doing on that file?
<jeffrin> may be it can change some program value by altering lkmc_fops
<wobbol> what does cat do to any file? It only does one thing.
<jeffrin> read from a file ?
<wobbol> yes.
<wobbol> what does dbugfs_create_file() do?
<jeffrin> may be it registers a new file into debugfs
<wobbol> Yes. When is that function called?
* psydroid (~psydroid@user/psydroid) has joined
<jeffrin>  debugfs_create_file
<wobbol> debugfs_create_file() is an external function. It is called inside your example kernel module. Which function calls debug_fs_create_file()?
<jeffrin> static int myinit(void)
<wobbol> Yes. What line in the example kernel module tells the kernel to execute that function?
<jeffrin> may  be  module_init(myinit)
<wobbol> Yes.
<wobbol> Starting from module_init(myinit) walk me through the code. Explain what each function argument is.
* nodelay (~zack@user/nodelay) has joined
<jeffrin> debugfs_create_file("lkmc_fops", S_IRUSR | S_IWUSR, NULL, NULL, &f\
<jeffrin> ops);
* nodelay has quit (Ping timeout: 252 seconds)
<jeffrin> the first gives the filename of the new file to be created
<wobbol> Good. Keep going.
<jeffrin> the second argument has S_IRUSR  which checks the read permission of the file
<wobbol> The second argument has more than that in it.
* Milkman has quit (Ping timeout: 252 seconds)
* slidercrank (~slidercra@user/slidercrank) has joined
<jeffrin> S_IWUSR represents  write permission bit of the file owner and finally both are bitwise ORed
<wobbol> Excellent. Please go on.
<jeffrin> the next two arguments are null
* TheSilentLink_ (~TheSilent@idlerpg/player/TheSilentLink) has joined
<jeffrin> the last argument pass the address of fops variable
<wobbol> Excellent.
<wobbol> When this function is finished, what happens to the /sys/kernel/debug/ directory?
<wobbol> You might have to unload the kernel module. Then check with ls -l
<jeffrin> a new file named lkmc_fops is created
<wobbol> Yes. You saw that the address of fops was passed to debug_create_file(). What does fops have inside it?
<jeffrin> does address of fops point to a method that will connect to userspace
<wobbol> address of fops is the address of the first byte of a `struct file_operations` named fops. This structure is inside the module. It gets put into kernel address space when the module is loaded. It is removed when the module is unloaded.
<wobbol> Everything in the code is kernel space _except_ variables marked with `__user`
* harveypwca has quit (Quit: Leaving)
<wobbol> It is supposed to be to help the humans reading it. The `__user` is not required however.
* Articulus (~Articulus@c-71-198-98-73.hsd1.ca.comcast.net) has joined
<jeffrin> great related thanks
<wobbol> Did you learn what `struct file_operations` holds inside?
<jeffrin> i saw that
<wobbol> What operation does cat do to files again?
<jeffrin> but what does .owner mean ? is it a data type
<wobbol> `.owner` is the variable `fops.owner`
<jeffrin> so why the dot ?
<wobbol> it is called a "Designated Initializer" it is a C99 thing. Here is the gcc docs on it https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html
* MarcoGiorgi (~Thunderbi@user/MarcoGiorgi) has joined
<jeffrin> cat concatenate files
<wobbol> In this context, cat: open the file -> read the file -> print the file to stdout
<wobbol> because it does that for each file, the effect is concatenate-ing the files.
 ok
<jeffrin> thanks
<wobbol> It sounds like you are understanding. Do you have any more questions?
* wobbol starts eating food
* JuanDaugherty (~juan@user/JuanDaugherty) has joined
<jeffrin> not now
<jeffrin> so have food
<wobbol> :D mention me if you like. I will be back.
<jeffrin> shall we continue tommorrow
<jeffrin> i like you
<jeffrin> what is  :D
<JuanDaugherty> big smile emoticon
<wobbol> jeffrin, Sure.
<jeffrin> thanks for the meaning of :D
<jeffrin> bye
<jeffrin> bye wobbol
* wootehfoot has quit (Read error: Connection reset by peer)
<wobbol> see you tomorrow jeffrin 
* luc4 (~luca@host-82-56-126-113.retail.telecomitalia.it) has joined
<jeffrin> ok thanks and bye again

https://stackoverflow.com/questions/38194057/struct-declaration-versus-definition


<wobbol> We may want to take this out of #kernel chat
<jeffrin> pk 
<wobbol> ?
* Disconnected ()
* jeffrin is already in use. Retrying with jeffrin_...
* jeffrin_ sets mode +Z on jeffrin_
* jeffrin_ sets mode +i on jeffrin_
* jeffrin_ sets mode +w on jeffrin_
<wobbol> hello?
<jeffrin_> shall i try to explain the code
<wobbol> Sounds good.
<jeffrin_> which function should i start explaining
<jeffrin_> who is calling these functions
<wobbol> start with module_init()
<wobbol> The kernel is calling these functions.
<jeffrin_> yesterday we started with module_init
<jeffrin_> should i do it again
<wobbol> alright, then pickup where we left off. We were looking at what the variable fops represents.
<wobbol> I think you asked "why the dot" in `.owner` and I gave you a little documentation about designated initalizers.
<jeffrin_> yes
<jeffrin_> is that just a data structure definition
<wobbol> It is an initialization. the definition is in the kernel source here linux/include/linux/fs.h
<wobbol> A definition says "how big, what kind, and what name the data has"
<wobbol> an err let me go make sure
<jeffrin_> does initialization gives values to data ?
<wobbol> ._. I was wrong about what the words mean.
<jeffrin_> oh
<wobbol> The code in the kernel module gives values to the variables of the struct.
<wobbol> I don't often use those words.
<wobbol> https://stackoverflow.com/questions/38194057/struct-declaration-versus-definition
<jeffrin_> let me see the url
<wobbol> There is discussion here about the exact terms. I find it confusing.
<wobbol> I find the word "instance" to be clear.
<jeffrin_> here fops is the instance right ?
<wobbol> yes
<wobbol> instance of what?
<jeffrin_> instance of a function  right ?
<jeffrin_> instance of a struct  right ?
<wobbol> yes what is that struct's name?
<jeffrin_> file_operations
<wobbol> yes. What is the data type of llseek?
<jeffrin_> static loff_t
<wobbol> that is the return type of llseek.
<wobbol> when a function is named but is missing the () it means the address of the function.
<jeffrin_> so it's a  pointer ?
<wobbol> absolutely, it is a pointer to function. Also called a function pointer. what would happen if fops.release(NULL, NULL) was written inside myinit()?
<jeffrin_> it closes lkmc_fops file ?
<wobbol> well, what is fops.release?
<jeffrin_> it calls the release function ... the output of release function
<wobbol> fops.release means the address of a function with the signature `static int(*func)(struct inode *inode, struct file *filep)`
<wobbol> in c the function never gets called unless it has the arguments on it. `fops.release(NULL, NULL)` would call the function with NULL as the first and second arguments.
<jeffrin_> oh because release is a function pointer ?
<wobbol> yes
<wobbol> what does `fops.open = open` mean?
<jeffrin_> the address of a function with the signature static int open(struct inode *inode, struct file *filp)
<wobbol> it means to assign the function pointer `open` to the variable `fops.open`
<jeffrin_> ya sorry ?
<wobbol> `struct file_operations` has a variable inside named open inside. this is what the .open or fopen.open means.
<wobbol> inside the module a function named open is defined. this is what open or &open means.
<wobbol> You can see this by renameing the open function to something like my_open then replacing all the references to the function pointer open with my_open.
<wobbol> ensure that you still assign to .open
 s/fopen/fops/
<wobbol> If this part isn't making sense I can break it down with source code.
<jeffrin_> please break it
<jeffrin_> iam some ehat clear
<jeffrin_> but confusing
<jeffrin_> more clear now
<wobbol> still writing. soon
<wobbol> alright https://pastebin.com/n405570U
<jeffrin_> ler me see
<wobbol> lines 33-37 are like in the kernel module. 48-50 are how you can access those variables normally.
<wobbol> each function pointer in sp is called twice with the same arguments. Because the function pointers inside sp are assigned to different functions in main, the second call_all() prints different stuff.
<wobbol> I have about 1 hour left. I have to leave after that.
<jeffrin_> ok
<jeffrin_> you leave now
<wobbol> In 40 min
<wobbol> Is the function pointer syntax making sense?
<jeffrin_> yes
<jeffrin_> your help is  great
<jeffrin_> thanks
<wobbol> No problem!
<wobbol> Keep learning! also checkout /usr/share/doc/linux/index.html if your distro has it. if not you can use the online version https://www.kernel.org/doc/html/latest/filesystems/debugfs.html





#include <stdio.h>
#include <time.h>
 
int add(int a, int b) {
    return a + b;
}
int subtract(int a, int b) {
    return a - b;
}
 
int print(char *msg) {
    return printf("print: %s\n", msg);
}
int time_print(char *msg) {
    time_t now_time = time(NULL);
    struct tm *now_tm = localtime(&now_time);
    return printf("%s: %s",msg, asctime(now_tm));
}
 
void hello_world(void) {
    printf("Hello, World!\n");
}
void a_name(void) {
    printf("Hello, somebody!\n");
}
 
struct some_pointers {
    int (*p1)(int, int);
    int (*p2)(char *);
    void (*p3)(void);
};
 
struct some_pointers sp = {
    .p1 = add,
    .p2 = print,
    .p3 = hello_world
};
 
void call_all(struct some_pointers *p) {
    printf("p->p1(1,2) -> %d\n", p->p1(1,2));
    p->p2("It's something!");
    p->p3();
}
 
int main(void) {
    puts("\n1. call_all()");
    call_all(&sp);
    sp.p1 = subtract;
    sp.p2 = time_print;
    sp.p3 = a_name;
    puts("\n2. call_all()");
    call_all(&sp);
    return 0;
}


chat --

 Invalid NickServ command.
-NickServ- Use /msg NickServ HELP for a NickServ command listing.
<jeffrin> NickServ REGISTER  jeffrin  ahiliation@gmail.com
-NickServ- Invalid NickServ command.
-NickServ- Use /msg NickServ HELP for a NickServ command listing.
-NickServ- You cannot use your nickname as a password.
-NickServ- Syntax: REGISTER <password> <email>
<jeffrin>  REGISTER hostmod  ahiliation@gmail.com
-NickServ- An email containing nickname activation instructions has been sent to ahiliation@gmail.com.
-NickServ- Please check the address if you don't receive it. If it is incorrect, DROP then REGISTER again.
-NickServ- If you do not complete registration within one day, your nickname will expire.
-NickServ- jeffrin is now registered to ahiliation@gmail.com.
-NickServ-  
-NickServ- For help using the network, please see the Guides
-NickServ- section on our website: https://libera.chat/guides/
-NickServ-  
-NickServ- If you still need help you can /JOIN #libera to find
-NickServ- network staff.

https://www.kernel.org/doc/html/latest/filesystems/
https://www.howstuffworks.com/

chat --

<jeffrin> may be i should accept failure
<mingdao> jeffrin, what do you mean by that?
* renergy has quit (Remote host closed the connection)
<jeffrin> kernel programming or c programming is too hard to follow
<mingdao> C is not that difficult to learn.
<jeffrin> i find it difficult to read a simple kernel module
<mingdao> I had Till Kamppeter show me how to edit a C file to make a printer work in 2003 after only using a Linux distro for about a month.
<mingdao> jeffrin: Maybe you need to start with some learning basics.
<jeffrin> files ?
<mingdao> Can you use more words...
<Maccampus> yeah try Basics first, then do Pascl & when you handle that switch to C & Java
<mingdao> machine learning first
<jeffrin> mingdao: i think i need a helping hand with C
<jeffrin> my be sysad is good for me 
<mingdao> jeffrin: https://www.learn-c.org/
<mingdao> You'll get better help if you post according to this: http://www.co.kerr.tx.us/it/howtoreport.html 
<mingdao> https://www.w3schools.com/c/
<mingdao> https://www.freecodecamp.org/news/the-c-programming-handbook-for-beginners/
<mingdao> https://cppdepend.com/blog/write-efficient-c-code-learn-from-linus-torvalds/
<schroes> there's one thing in c that confuses beingnners
<schroes> most languages abstract types away as if they were something truly abstract
<schroes> but in C, it emphasizes there's only "memory" and you optionally can use types to represent that
<jeffrin> schroes : pointers ?
<schroes> not only, the whole language is set around that principle
<jeffrin> schroes : pointers ?
<schroes> not only, the whole language is set around that principle
* tolip has quit (Ping timeout: 252 seconds)
* new_freedom has quit (Quit: Leaving)
* rkazak has quit (Ping timeout: 252 seconds)
* sajenim has quit (Ping timeout: 244 seconds)
<jeffrin> In  Linux mostly everything is a file
<xeyler> jeffrin: i recommend https://beej.us/guide/bgc/html/split/pointers.html
<xeyler> beej's guides are exceptionally well written. his guide to c programming was criticized in the past when it was still a beta-quality document, but it's much more complete now
<xeyler> the rhetoric is approachable without being shallow
<jeffrin> i should learn more about file perations on C
<jeffrin> mingdao :  thanks for the links
<xeyler> jeffrin: there's some helpful information on file I/O in chapter 9 of beej's guide, should you chose to use it
<schroes> <jeffrin> In  Linux mostly everything is a file
<schroes> that's only kernel APIs
<schroes> once you've already acquired the data you need, when you process them in the userspace, they aren't files anymore



_Linux Kernel Engineer_

elixir.bootlin.com
lwn.net/Kernel/LDD3
https://lists.kernelnewbies.org/pipermail/kernelnewbies/2017-April/017765.html
https://docs.kernel.org/admin-guide/index.html
https://startpage.com/
https://www.armosec.io/glossary/linux-kernel/
goo.gl/zi5V (HOW TO ASK IN #kernel  https://libera.chat/)
https://www.duckware.com/bugfreec/index.html/
